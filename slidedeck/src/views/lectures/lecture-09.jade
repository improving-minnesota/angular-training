doctype html
include ../includes/mixins

+page("Lecture 09 - Filters")
  +lecture-title-page("Filters", "Lecture 09")

  section
    h1 Lab Eight
    h2 Solution

  section
    h1 Filters

  section
    p When used in expressions,
      strong  filters
      |  are an easy way to convert model values to display values.
    p Inside an expression, just "pipe" the model value to a particular filter.
    br
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;p&gt;{{ booleanValue | yesNo }}&lt;/p&gt;

        </code>

  section
    p Filters can accept optional arguments separated by a colon.
    br
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;p&gt;{{ booleanValue | yesNo:arg1:arg2 }}&lt;/p&gt;

        </code>

  section
    p They can also be chained to perform sequential modifications.
    br
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;p&gt;{{ booleanValue | yesNo | uppercase }}&lt;/p&gt;

        </code>

  section
    p Filters in action
    br
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;p&gt;{{ myValue | uppercase }}&lt;/p&gt;

        </code>
    br
    div(id="example1")
      input(ng-model="myValue")
      p {{myValue | uppercase}}

  section
    h2 Creating Custom Filters

  section
    p Filters are
      strong  specialized objects
      | , which means their API is defined by AngularJS.

  section
    p To create a filter, just register a new filter factory function with your module.

  section
    p Internally, this will use the
      strong  filterProvider
    |  (provided by AngularJS).
    br
    pre.
      <code class="js" data-trim>
      angular.module('boolean.filters', [ ])
        .filter('yesNo', function(myDependency) {

        });

      </code>

  section
    p This factory function should return a new filter function which takes the input value as the first argument.
    br
    pre.
      <code class="html" data-trim>
      &lt;p&gt;{{myVar | yesNo}}&lt;/p&gt;

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('boolean.filters', [ ])
        .filter('yesNo', function(myDependency) {
          return function(value) {
            if (value) {
              return 'Yes';
            } else {
              return 'No';
            }
          };
        });

      </code>

  section
    p Filter arguments are passed in as additional arguments to the filter function.
    br
    pre.
      <code class="html" data-trim>
      &lt;p&gt;{{myVar | yesNo:true}}&lt;/p&gt;

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('boolean.filters', [ ])
        .filter('yesNo', function() {
          return function(value, casual) {
            if (value) {
              return casual ? 'Yep' : 'Yes';
            } else {
              return casual ? 'Nope' : 'No';
            }
          };
        });

      </code>

  section
    p Filters aren't limited to simple values. They can manipulate any type of object.
    br
    pre.
      <code class="html" data-trim>
      &lt;p&gt;{{new Date() | momentShortDate}}&lt;/p&gt;

      </code>
    pre.
      <code class="js" data-trim>
      angular.module('date.filters', [ ])
        .filter('momentShortDate', function () {
          return function (date) {
            return moment(date).format("MMM D, YYYY");
          };
        })

      </code>

  section
    h2 Filtering Arrays

  section
    p Since filters can be used with any type of object, we can also use them to filter arrays.

  section
    p To use a filter with
      strong  ng-repeat
      | , simply "pipe" the source array through a filter.

  section
    p This will take the source array and return a new filtered array to
      strong  ng-repeat.
    br
    pre.
      <code class="html" data-trim>
      &lt;tr ng-repeat="employee in employeeCtrl.employees | filter:myFilter | orderBy:'name'"&gt;
        &lt;td&gt;{{employee.name}}&lt;/td&gt;
      &lt;/tr&gt;

      </code>

    p The "filter" and "orderBy" filters are provided by AngularJS.

  section(id="example2", ng-controller="Lecture9Controller as lecture9Controller")
    p Filtering arrays in action
    br
    input.form-control(ng-model="myFilter")
    br
    div(ng-repeat="isisEmployee in lecture9Controller.isisEmployees | filter:myFilter | orderBy:'name'") {{isisEmployee.name}}

  section
    h1 Unit Testing
    h2 Continued

  section
    p To test our filters, we'll first use the injector service to get our filter.
    br
    pre.
      <code class="js" data-trim>
      var yesNoFilter;

      beforeEach(function() {
        yesNoFilter = $injector.get('yesNoFilter');
      });

      </code>

    p Notice that "Filter" is appended to the actual name of our filter.

  section
    p Then, we'll pass values into it and test that the output meets our expectations.
    br
    pre.
      <code class="js" data-trim>
      describe('yesNo Filter', function() {
        it('should display Yes for true', function() {
          expect(yesNoFilter(true)).to.equal('Yes');
        });
      });

      </code>

  section
    h1 Lab Nine
    h2 Filters

  section
    p In this lab you'll use the
      strong  orderBy
      |  filter on employee, timesheet, and project lists and create some of your own filters.

  script.
    angular.module('lecture09', []).controller('Lecture9Controller', function() {
      var vm = this;

      vm.isisEmployees = [
        {name: 'Sterling Archer'},
        {name: 'Lana Kane'},
        {name: 'Malory Archer'},
        {name: 'Cyril Figgis'},
        {name: 'Pam Poovey'},
        {name: 'Algernop Krieger'}];
    });

    angular.bootstrap(document.getElementById("example1"), ["lecture09"]);
    angular.bootstrap(document.getElementById("example2"), ["lecture09"]);
