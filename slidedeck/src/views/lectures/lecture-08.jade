doctype html
include ../includes/mixins

+page("Lecture 08 - Directives")
  +lecture-title-page("Directives", "Lecture 08")

  section
    h1 Lab Seven
    h2 Solution

  section
    h1 Directives

  section
    p
      | At a high level,
      strong  directives
      |  are markers on a DOM element (such as an attribute, element name, or CSS class)
      | that tell AngularJS's HTML compiler
      strong  ($compile)
      |  to attach a specified behavior to that DOM element.

  section
    p Before we can write a directive, we need to know how Angular's HTML compiler determines when to use a given directive.

  section
    h2 Matching Directives

  section
    p In the following example, we say that the &lt;input&gt; element matches the
      strong  ngModel
      |  directive.
    br
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;input ng-model="myModel" /&gt;

        </code>

  section
    p Angular normalizes an element's tag and attribute name to match elements to directives.

  section
    p
      | Directives are typically declared in
      strong  camelCase
      |  form.  Since HTML is case insensitive, directives are referred to in their lower-case-dash-delimited, or
      strong  dash-case
      |  form when attached to elements.

  section
    p Below is an example of declaring a directive and referring to it in HTML.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', [
          //...
        ]);

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div my-cool-directive&gt;&lt;/div&gt;

      </code>

  section
    p
      strong  $compile
      |  can match directives based on
      strong  element names,
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;my-cool-directive&gt; &lt;/my-cool-directive&gt;

        </code>
    p
      strong attributes,
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;div my-cool-directive&gt; &lt;/div&gt;

        </code>
    p
      strong class names,
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;div class="my-cool-directive"&gt; &lt;/div&gt;

        </code>
    p and
      strong  HTML comments.
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;!-- directive: my-cool-directive --&gt;

        </code>

  section
    h4 So which should you use?
    p For best browser support, the attribute method is preferred (old version of IE).
    p Otherwise, for newer browsers, the tag method is preferred.

  section
    h2 Creating directives

  section
    p Like controllers, directives are registered on modules.

  section
    p
      | To register a directive, you use the
      strong  module.directive
      |  API.
      strong  module.directive
      |  takes the normalized directive name followed by a factory function.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective',
          function(myDependency) {
            return {
              //...
            };
          }
        );

      </code>

  section
    p
      | This factory function should return an object with the different options to tell
      strong  $compile
      |  how the directive should behave when matched.

  section
    h2 Directive Configuration

  section
    h3 Templates

  section
    p You can use
      strong  templates
      |  to set the contents of your directive in two ways.

  section
    p You can add inline templates for very small templates.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            template: '&lt;div&gt;{{helloWorld}}&lt;/div&gt;'
          };
        });

      </code>

  section
    p More often that not, your templates will be large.  In this case, it's better to use the
      strong  templateUrl
      |  option to link to a separate HTML file.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            templateUrl: 'templates/directives/my-cool-directive.html'
          };
        });

      </code>

  section
    p One important thing to note about directive templates is that they can only have one root element.

  section
    p If a directive template has more than one root element, the
      strong  $compile
      |  service will throw an error.

  section
    p Is the following directive template valid?
    br
    pre.
      <code class="html" data-trim>
      &lt;!-- TODO: Do something meaningful --&gt;
      &lt;div class="text-center"&gt;
        &lt;p&gt;Hello World!&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section
    h4 Nope!
    p HTML comments are elements, which means this template violates the one root element rule.

  section
    h3 Replace

  section
    p The
      strong  replace
      |  option specifies how the template should be placed in the directive.

  section
    p When
      strong  replace
      |  is
      strong  true
      | , the template will replace the element the directive is specified on.
    p When
      strong  replace
      |  is
      strong  false
      | , the template will be placed inside the element the directive is specified on.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            replace: true
          };
        });

      </code>

  section
    p Template
    pre.
      <code class="html" data-trim>
      &lt;div class="text-center"&gt;
        &lt;p&gt;Hello World!&lt;/p&gt;
      &lt;/div&gt;

      </code>
    p Result when replace is set to false
    pre.
      <code class="html" data-trim>
      &lt;div my-cool-directive&gt;
        &lt;div class="text-center"&gt;
          &lt;p&gt;Hello World!&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>
    p Result when replace is set to true
    pre.
      <code class="html" data-trim>
      &lt;div class="text-center"&gt;
        &lt;p&gt;Hello World!&lt;/p&gt;
      &lt;/div&gt;

      </code>

  section
    h3 Restrict

  section
    p
      | When you create a directive, it is restricted to attribute only by default. In order to create
      | directives that are triggered by element or class name, you need to use the restrict option.
    ul
      li.
        <strong>A</strong> - Matches attribute name.
      li.
        <strong>E</strong> - Matches element name.
      li.
        <strong>C</strong> - Matches class name.
      li.
        <strong>M</strong> - Matches HTML comment.

  section
    p The directive below would match elements, attributes, CSS class names, or HTML comments.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            restrict: 'AECM'
          };
        });

      </code>

  section
    h3 Scope

  section
    p By default, a directive uses the parent scope.
    p This can be problematic because it could set or change values that already exist.

  section
    p
      | What we want to be able to do is separate the scope inside a directive from the scope outside the directive, and
      | then map the outer scope to a directive's inner scope.

  section
    p We can do this by creating what we call an
      strong  isolate scope
      |  using the
      strong  scope
      |  option on the directive.

  section
    p The directive below will have an isolate scope that is not mapped to anything in the parent scope (completely isolated)
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            scope: true
          };
        });

      </code>

  section
    p Assuming myCoolDirective has a completely isolate scope,
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 3"&gt;
        &lt;p&gt;{{myVar}}&lt;/p&gt;
        &lt;div my-cool-directive&gt;
          &lt;p&gt;{{myVar}}&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>
    p it would result in the following after being compiled and linked.
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 3"&gt;
        &lt;p&gt;3&lt;/p&gt;
        &lt;div my-cool-directive&gt;
          &lt;p&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>

  section
    p When we want to map the outer scope to the directives inner scope, we use a
      strong  scope configuration object.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective',function() {
          return {
            scope: {
              // ...
            }
          };
        });

      </code>

  section
    p There are multiple ways to map parent scope to the isolate scope.
    p Let's start with the most common: the '=' or
      strong  two-way
      |  binding.

  section
    p This will instruct Angular to bind the value supplied with the element attribute "some-attribute" to the isolate scope.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            scope: {
              someAttribute: '='
            }
          };
        });

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div my-cool-directive some-attribute="myAttribute"&gt;&lt;/div&gt;

      </code>

  section
    p This will create a two way mapping between the parent scope and the isolate scope.
    p Changes made in the parent scope are reflected in the isolate scope and visa versa.
    img.no-style(src="/angular-training/assets/img/lecture-08/scope.png")

  section
    p Assuming myCoolDirective binds someAttribute between scopes,
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 3"&gt;
        &lt;p&gt;{{myVar}}&lt;/p&gt;
        &lt;div my-cool-directive some-attribute="myVar"&gt;
          &lt;p&gt;{{someAttribute}}&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>
    p it would result in the following after being compiled and linked.
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 3"&gt;
        &lt;p&gt;3&lt;/p&gt;
        &lt;div my-cool-directive some-attribute="myVar"&gt;
          &lt;p&gt;3&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>

  section
    p Next, we have the '&', or
      strong  function
      |  binding.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            scope: {
              someCalculation: '&'
            }
          };
        });

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div my-cool-directive some-calculation="calculateSomeValue()" &gt;&lt;/div&gt;

      </code>

  section
    p The '&' binding allows a directive to trigger evaluation of an expression in the context of the original scope, at a specific time.

  section
    p Any legal expression is allowed, including an expression which contains a function call.

  section
    p The '&' binding is very useful for supplying callbacks to directives.

  section
    p The '@', or
      strong  attribute value or expression
      |  binding.

  section
    p The '@' binding maps the attribute value (string) in the context of the parent scope to the isolate scope.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective',function() {
          return {
            scope: {
              someAttribute: '@attributeValue'
            }
          };
        });

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div my-cool-directive attribute-value="{{ count + " things" }}" &gt;&lt;/div&gt;

      </code>

  section
    p Assuming myCoolDirective binds the value of someAttribute between scopes.
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="count = 3"&gt;
        &lt;div my-cool-directive attribute-value="{{count + ' things'}}"&gt;
          &lt;p&gt;{{someAttribute}}&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>
    p It would result in the following after being compiled and linked.
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="count = 3"&gt;
        &lt;div my-cool-directive attribute-value="3 things"&gt;
          &lt;p&gt;3 things&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>

  section
    p The newest type of binding is the '<', or
    strong  one-way
    |  binding. This binding will allow a directive to pass data from the parent that will not reflect
    | a change in the parent scope if the value is modified by the directive.

  section
    h3 Transclude

  section
    p The
      strong  transclude
      |  option changes the way scopes are nested.

  section
    p It makes it so that the contents of a transcluded directive have whatever scope is outside the directive, rather than whatever scope is on the inside.

  section
    p In doing so, it gives the contents access to the outside scope.

  section
    p Another way to look at transclusion is as a picture frame.
    img.no-style(src="/angular-training/assets/img/lecture-08/transclude-frame.png")

  section
    p First, let's look at using a transclude directive.
    br
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myTranscludedVar = 'Hello'"&gt;
        &lt;div my-frame-directive&gt;
          &lt;p&gt;{{myTranscludedVar}}&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>

  section
    p Now, let's look at the template for a transclusion directive.
    br
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 'World!'"&gt;
        &lt;div ng-transclude &gt;&lt;/div&gt;
        &lt;p&gt;{{myVar}}&lt;/p&gt;
      &lt;/div&gt;

      </code>
    p Angular will place the contents of the directive
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;p&gt;{{myTranscludedVar}}&lt;/p&gt;

        </code>
    p in the place of the element with the ng-transclude attribute.

  section
    p After compilation, the final DOM will look like
    br
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myTranscludedVar = 'Hello'"&gt;
        &lt;div my-frame-directive&gt;
          &lt;div ng-init="myVar = 'World!'"&gt;
            &lt;p&gt;Hello&lt;/p&gt;
            &lt;p&gt;World!&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>

  section
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myTranscludedVar = 'Hello'"&gt;
        &lt;div my-frame-directive&gt;
          &lt;p&gt;{{myTranscludedVar}}&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myVar = 'World!'"&gt;
        &lt;div ng-transclude &gt;&lt;/div&gt;
        &lt;p&gt;{{myVar}}&lt;/p&gt;
      &lt;/div&gt;

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div ng-init="myTranscludedVar = 'Hello'"&gt;
        &lt;div my-frame-directive&gt;
          &lt;div ng-init="myVar = 'World!'"&gt;
            &lt;p&gt;Hello&lt;/p&gt;
            &lt;p&gt;World!&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      </code>

  section
    p To use transclusion with a directive, just add the transclude option to the directive configuration.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myFrameDirective', function() {
          return {
            transclude: true
          };
        });

      </code>

  section
    h3 Linking

  section
    p Directives that want to modify the DOM typically use the
      strong  link
      |  option.

  section
    p The link property takes a function with the following signature:
    br
    pre.
      <code data-trim>
      function(scope, element, attrs) {

      }

      </code>
    ul
      li.
        <strong>scope:</strong> the Angular scope of the directive (isolate).
      li.
        <strong>element:</strong> the jqLite-wrapped element that this directive matches.
      li.
        <strong>attrs:</strong> a hash object with key-value pairs of normalized attribute names and their corresponding attribute values.

  section
    p Inside the link function, you can initialize scope, watch properties, modify element attributes, etc.

  section
    p For example
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            scope: {
              myVar: '='
            }
            link: function(scope, element, attrs) {
              scope.updatedCount = 0;
              scope.$watch('myVar', function() {
                scope.updatedCount += 1;
                var contents = 'myVar updated ' +
                  scope.updatedCount + ' times.';
                element.text(contents);
              });
            }
          };
        });

      </code>

  section
    h3 Controllers

  section
    p You can easily attach controllers to directives with the
      strong  controller
      |  option.

  section
    p There are two ways to specify controllers on directives.

  section
    p You can declare a controller inline:
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            scope: {
              myVar: '='
            },
            controller: function($scope) {

            }
          };
        });

      </code>

    p The
      strong  $scope
      |  injected into the controller will be the isolate scope of the directive.

  section
    p Or, you can specify the name of an existing controller:
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .controller('MyCoolDirectiveController', function($scope) {

        })
        .directive('myCoolDirective', function() {
          return {
            scope: {
              myVar: '='
            },
            controller: 'MyCoolDirectiveController'
          };
        });

      </code>

    p This is very useful if you want to share controllers across directives.

  section
    h3 Require

  section
    p In some cases, you'll want to use multiple directives together and have them communicate with each other.

  section
    p The
      strong  ngModel
      |  and
      strong  validation
      |  directives are a great example of this behavior.

  section
    p The
      strong  ngModel
      |  directive controls the binding between the input (view) value and model value.
    p The
      strong  ng-maxlength
      |  directive tells the
      strong  ngModel
      |  directive when the view value is valid and that it should update the model.
    br
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;input ng-model="myString" ng-maxlength="5" /&gt;

        </code>

  section
    p For this use case, AngularJS provides the
      strong  require
      |  configuration option for directives.

  section
    p The
      strong  require
      |  option tells the
      strong  $compile
      |  service to find another directive and inject its controller as the fourth argument to the linking function.

  section
    p The
      strong  require
      |  option takes a string name (or array of strings) of the directive(s) to pass in.

  section
    p If no such directive can be found, or if the directive does not have a controller, then an error is raised.

  section
    p The require names can be prefixed with flags to tell the
      strong  $compile
      |  service how to find another directive's controller.

  section
    h4 (no prefix)
    p Locate the required controller on the current element. Throw an error if not found.

  section
    h4 ?
    p Attempt to locate the required controller or pass null to the link function if not found.

  section
    h4 ^
    p Locate the required controller by searching the element's parents. Throw an error if not found.

  section
    h4 ?^
    p Attempt to locate the required controller by searching the element's parents or pass null to the link function if not found.

  section
    p Let's look at creating a directive that requires the
      strong  ngModel
      |  directive.

  section
    p Since
      strong  ngModel
      |  and
      strong  myCoolDirective
      |  are siblings (on the same element), we won't need to specify a prefix.
    br
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;input ng-model="myString" my-cool-directive /&gt;

        </code>

  section
    p Now that the
      strong  ngModel
      |  controller is injected into our link function, we can access its controller.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('myCoolDirective', function() {
          return {
            require: 'ngModel',
            link: function(scope, element, attrs, ngModel) {
              console.log("Model Value", ngModel.$modelValue);
              console.log("View Value", ngModel.$viewValue);
            }
          };
        });

      </code>

    p Here, we're just printing out the model value and view value maintained by the
      strong  ngModel
      |  controller.

  section
    p So when should you put logic in a controller vs. using a linking function?
    br
    ul
      li
        strong Controller
        |  - Your logic can be reused across directives.
      li
        strong Controller
        |  - You're providing an API for use by other directives (require).
      li
        strong Linking Function
        |  - You're directly manipulating DOM.

  section
    h1 Unit Testing
    h2 Continued

  section
    p Now that we've learned about how to create our own directives, we'll need to learn how we can test them.

  section
    p First, we'll need to make sure that we inject the
      strong  $compile
      |  service, our directive module, and any templates used by the directive.
    br
    pre.
      <code data-trim>
      beforeEach(module(
        'app.directives',
        'assets/templates/directives/my-cool-directive.html'
      ));

      beforeEach(inject(function($rootScope, _$compile_) {
        $compile = _$compile_;
        $scope = $rootScope.$new();
      }));

      </code>

  section
    p
      | Then, we'll create our mock
      strong  $scope
      | , element, and finally use the
      strong  $compile
      |  service to compile and link our directive.
    br
    pre.
      <code data-trim>
      beforeEach(function () {
        // Notice that we can use properties
        // on our mock scope with the directive below
        $scope.myColor = 'red';

        // Create a jqLite element with our directive
        element = angular.element(
          '&lt;div my-cool-directive color="myColor"&gt;' +
          '&lt;/div&gt;'
        );

        // This will compile the element with our mock scope
        $compile(element)($scope);
      });

      </code>

  section
    p In a real browser, scope digests are automatically triggered by AngularJS in reaction to various events.

  section
    p There are no such events during automated testing so we'll need to force a scope digest.

  section
    p The forced digest cycle will propagate changes between the parent scope and isolate scope.
    br
    pre.
      <code data-trim>
      beforeEach(function () {
        $scope.myColor = 'red';

        element = angular.element(
          '&lt;div my-cool-directive color="myColor"&gt;' +
          '&lt;/div&gt;'
        );

        $compile(element)($scope);

        // This propagate the value of $scope.myColor with the
        // directive's scope.color
        $scope.$digest();
      });

      </code>

  section
    p Now we're ready to start testing the expected behavior of the directive.

  section
    p Lets assume that
      strong  myCoolDirective
      |  sets the CSS attribute  "color" on the element based on
      strong    myColor.
    br
    pre.
      <code data-trim>
      describe('my cool directive', function() {
        it('should set the element color', function () {
          expect(element.css('color')).to.equal('red');
        });

        it('should respond to changes', function () {
          // Notice that we're forcing a digest by using apply
          $scope.$apply(function() {
            $scope.myColor = 'blue';
          });
          expect(element.css('color')).to.equal('blue');
        });
      });

      </code>

  section
    p What if we want to test something that's not directly accessable through the DOM?

  section
    p AngularJS provides jqLite functions that expose the parent scope and isolate scope of a particular element

  section
    p
      | The non-isolate scope can be accessed by calling
      strong  element.scope()

  section
    p
      | The isolate scope can be accessed by calling
      strong  element.isolateScope()

  section
    p Here, we can validate the binding between the parent and isolate scope.
    br
    pre.
      <code data-trim>
      describe('my cool directive', function() {
        it('should have bound scopes', function () {
          $scope.$apply(function() {
            $scope.myColor = 'blue';
          });
          expect(element.isolateScope().color).to.equal('blue');
        });
      });

      </code>

  section
    h1 Components

  section
    p Beginning in Angular 1.5, a
      strong  component
      |  is a special directive that uses a simpler configuration than a normal directive.

  section
    p  A
      strong  component
      |  is instantiated on a module, just like a directive.
      | The first argument is the name of the component, and the second is the component's configuration object.


  section
    p This is slightly different (and more simple) than the configuration required for a directive. Notice the differences:
    p Directive
    pre.
      <code data-trim>
      angular.module('app.directives', [])
      .directive('missionImpossible', function() {
        return {
          //...
        };
      });

      </code>

    p Component
    pre.
      <code data-trim>
      angular.module('app.components', [])
      .component('missionImpossible', {});

      </code>

  section
    p So when would we use a component vs. using a directive?

  section
    p You can use a component when:
    ul
      li.
        You do not need to manipulate DOM or add event listeners or watches
      li.
        You do not want to use a directive by declaring it in a DOM attribute or CSS class (components can ONLY be elements)
      li.
        You do not need advanced directive functionality, like priority

  section
    p This is due to the simplifying changes that the Angular team has made to make it easier to create custom directives,
    | and also to prepare developers for transition to Angular 2.

  section
    p We'll go over a few of these changes.

  section
    h3 Controllers

  section
    p Controllers inside a component are declared in a similar to those in directives; however, components will give a default value of
      strong  $ctrl
      |  if no explicit controllerAs or "Controller as ctrl" syntax is used.

  section
    pre.
      <code data-trim>
        ...
        controller: function() {}
        ...
      </code>

  section
    h3 Scope

  section
    p Earlier, we learned that directives can inherit scope from its parent or it can create an isolate scope.

  section
    p In contrast, components have isolate scope by default.

  section
    p This is to enforce the idea that components should only control their own view and data.

  section
    p So how do we map data from the directive's parent to the isolate scope?

  section
    p We can use the
      strong  bindings
      |  option to map the data. Any declared bindings are automatically bound to the component's controller.

  section
    p All of the bindings that we can use on a directive are available, but we should be mindful about how that data is mapped.

  section
    p Inputs to a component should be mapped with '@' and '<' so that changes to these items will not be realized in the parent scope.

  section
    pre.
      <code data-trim>
      ...
      bindings: {
        agent: '<',
        mission: '<',
        message: '@'
      }
      ...
      </code>
  section
    p If data needs to be modified inside a component, it should be modified via passing callback functions, which are bound
    | with the '&', or function binding.

  section
    pre.
      <code data-trim>
      ...
      bindings: {
        accept: '&',
        selfDestruct: '&'
      }
      ...
      </code>
    pre.
      <code class="html" data-trim>
      &lt;button
        ng-click="$ctrl.accept($ctrl.agent, $ctrl.mission)"&gt;Accept&lt;/button&gt;
      </code>

  section
    h3 Templates

  section
    p Templates can now be defined as a function that can have
      strong  $element
      |  and
      strong  $attrs
      | injected into it.

  section
    p This function needs to return a string representing the HTML.

  section
    pre.
      <code data-trim>
      ...
      template: function($element, $attrs) {
        return [
          '&lt;div&gt;',
            '&lt;p&gt;Message: {{$ctrl.message}}&lt;/p&gt;',
            '&lt;button ',
              'ng-click="$ctrl.accept($ctrl.agent, $ctrl.mission)"&gt;Accept&lt;/button&gt;',
            '&lt;button ',
              'ng-click="$ctrl.selfDestruct($ctrl.mission)"&gt;Decline&lt;/button&gt;',
          '&lt;/div&gt;'
        ].join('');
      }
      </code>

  section
    p Again, however, we'll most likely use the
      strong  templateUrl
      |  property to link to a separate HTML file.

  section
    h3 Putting it all together

  section
    pre.
      <code data-trim>
      angular.module('app.components')
        .component('missionImpossible', {
          bindings: {
            agent: '<',
            mission: '<',
            message: '@',
            accept: '&',
            selfDestruct: '&'
          },
          controller: function() {},
          templateUrl: 'assets/templates/components/mi/mi.html'
        });
      </code>

  section
    h1 Unit Testing

  section
    p Components have a special service called
      strong  $componentController
      |  that can be injected to aid in testing components.

  section
    pre.
      <code data-trim>
      beforeEach(module(
        'app.directives',
        'assets/templates/directives/my-cool-directive.html'
      ));
      beforeEach(inject(function($rootScope, _$componentController_) {
        $scope = $rootScope.$new();
        $componentController = _$componentController_;
      });
      beforeEach(
        spies = {
          accept: sinon.spy(),
          selfDestruct: sinon.spy(),
        }
      );

      </code>

  section
    p The
      strong  $componentController
      |  can then be used to instantiate our component and pass data in.

  section
    pre.
      <code data-trim>
        var component = $componentController('missionImpossible',
          {$scope: $scope},
          {
            agent: {
              name: 'Sterling Archer'
            },
            mission: {
              name: 'Save the World'
            },
            message: 'URGENT',
            accept: spies.accept,
            selfDestruct: spies.selfDestruct
          }
        );
      </code>

  section
    h2 Lab 8 - Directives
